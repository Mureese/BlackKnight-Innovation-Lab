#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import sagemaker
from sagemaker import get_execution_role
import json
import boto3
import nltk


#getting sagemaker session setup 
sess = sagemaker.Session()

role = get_execution_role()

bucket = 'mureese-testing'


# In[ ]:


region_name = 'us-east-1'
s3_output_bucket = 's3://mureese-testing/Model_Output'


#creating blazingtext training contatiner
container = sagemaker.amazon.amazon_estimator.get_image_uri(region_name, "blazingtext", "latest")
print('Using SageMaker BlazingText container: {} ({})'.format(container, region_name))


#Model Estimator object
model = sagemaker.estimator.Estimator(container,
                                         role, 
                                         train_instance_count=1, 
                                         train_instance_type='ml.c5.xlarge',
                                         train_volume_size = 5,
                                         train_max_run = 7200,
                                         input_mode= 'File',
                                         output_path=s3_output_bucket,
                                         sagemaker_session=sess)

#Model Hyperparmeters
model.set_hyperparameters(mode="supervised",
                            epochs=50,
                            min_count=3,
                            learning_rate=.015,
                            vector_dim=100,
                            early_stopping=True,
                            patience=3,
                            min_epochs=5,
                            word_ngrams=1)


#Model data inputs
train_data = sagemaker.session.s3_input("s3://mureese-testing/Train/train_text.csv", distribution='FullyReplicated', 
                        content_type='text/plain', s3_data_type='S3Prefix')
validation_data = sagemaker.session.s3_input("s3://mureese-testing/Test/test_text.csv", distribution='FullyReplicated', 
                             content_type='text/plain', s3_data_type='S3Prefix')
data_channels = {'train': train_data, 'validation': validation_data}


#Model training
model.fit(inputs=data_channels, logs=True)


# In[ ]:


#Deploy an endpoint for testing
text_classifier = model.deploy(initial_instance_count = 1,instance_type = 'ml.m4.xlarge')




sentences = ["a87473e878c1 cd50e861f48b e943e5e5b779 25c57acdf805 6bc122aa4b06 d38820625542 b4f1b88bd3f3 6ca2dd348663 3f7a70f3474f f07761418345 5948001254b3 9997460cf372 51fc8b56e14f 5cde1ed4f9b0 dec88250479b a20e78c41cf9 d9ef68daef4c ff714b9fa7fd 8e93a2273a93 54709b24b45f 9a42ead47d1c 798fe9915030 2d5d7bc2df91 6b583fe13e39 cd50f04925dd 3d877a3bc4f0 ff1c26ea0b6f 87b8193a0183 ecee69844b4e 96776b42c1d5 133d46f7ed38 f682089485c3 d38820625542 0c470ee92bb5 f8b0c07e306c 878460b4304e 51fc8b56e14f 3f7a70f3474f b4f1b88bd3f3 d911e9441d32 c16651ffa1b7 9374c105ef84 d38820625542 878460b4304e f8dab246f73f b4f1b88bd3f3 3f7a70f3474f c63534ebfa82 ddf4525e90e3 55b85f1ee56e e0a08df8ec4c 1932d6ce3497 9448e1c70dec 8243aca146b2 6ce6cc5a3203 878460b4304e b4f1b88bd3f3 a1bb6b4223d9 ba02159e05b1 cd50e861f48b ff714b9fa7fd 549330b9e320 ff714b9fa7fd 2ea49cf89745 f7bb594ff117 e4dad7cb07b6 37ac79620fc6 1087de55f102 80948b43ec70 d9fc2cff7e21 abca9d18fae2 6cfef272bdb9 9d83e581af4b cc9e05bc2a86 cbd0a3abbc34 69954839bb65 f7bb594ff117 df03d288b8b6 e63fa74d3c8b 22f8fa324aed f7bb594ff117 dff2d27792d5 8cb71bb0ee27 83f8b75d8fe3 cd50f04925dd 431392fb12c7 ff714b9fa7fd 58b1c79289d7 ecee69844b4e 5948001254b3 9997460cf372 da9ad7407226 a263b63bc282 011113964d37 da9ad7407226 b73e657498f2 17c11ac4749f 36e7aa72ffe1 0b3f3d23bd37 b13cff832743 0cbca93be301 b4f1b88bd3f3 ee8125ecd585 cf4fc632eed2 6b343f522f78 a87473e878c1 4ea48dbbe14e 5f9c2ac954be 61e151399c9d 7b477e3d63d2 cdc95c39cac8 f07761418345 22fa1184be26 d38820625542 d9ef68daef4c 11269ab19093 f7ae6f8257da d944e076fa92 d38820625542 6cfef272bdb9 8ebb4fffd292 98b0900e06f4 6469b7eeb029 1b6c95839a6d 44c1e122f3f0 ea95010f229b cfd22ba194a9 828e5c947b2b 7860028b1d17 6dbd5ceef3d1 f60bd1bc4fe5 05b8cb495fc2 9d83e581af4b d38820625542 7d9e333a86da 6cfef272bdb9 9d83e581af4b 133d46f7ed38 1087de55f102 ef4ba44cdf5f b02eb907dd1a 35991d8609e2 29f6e5802d4f 133d46f7ed38 874b796362b6 e943e5e5b779 4d28878de1db d1c3631d621b 7d9e333a86da d38820625542 133d46f7ed38 1b7657be8986 1ab34730c1e0 8502c0087099 cd50f04925dd 431392fb12c7 ecee69844b4e 58b1c79289d7 a1bb6b4223d9 ff714b9fa7fd 1b3e5dc39eb9 586242498a88 5680bf4cc121 69c87281a156 c8207fafe699 ecee69844b4e 6bf9c0cb01b4 8cb71bb0ee27 ff714b9fa7fd a1bb6b4223d9 f7bb594ff117 ff714b9fa7fd 386e8b20726f 8502c0087099 dab42b5e7528 b73e657498f2 26f7353edc2e cd50f04925dd 87b8193a0183 259218088611 135307dba198 60d18132df81 133d46f7ed38 f7bb594ff117 d38820625542 142d16db61dd cd50f04925dd b7c81dd679ed afab4a5c0f58 1c303d15eb65 11269ab19093 1ab34730c1e0 57d5616683d8 ecee69844b4e 83da9eb0a417 54fb27d07530 8d21095e8690 0562c756a2f2 3486e5fe0d73 1b6d0614f2c7 fb82195dee42 2d5d7bc2df91 6b583fe13e39 d19b1c129f40 798fe9915030 b73e657498f2 25c57acdf805 b7ab56536ec4 6101ed18e42f b7a0f56f6ce8 7498a1e9d9d7 ac624879ac84 6bc122aa4b06 586242498a88 1e0a48a2a3df 42093a8dfeb1 abca9d18fae2 f54a40468e55 08ecf2a69dc7 14bc74b659ac f11e7777d8b5 667ad4f8c507 0662d94b3d3b 868759570f1a e7e059c82399 6bc963b8a2b5 586242498a88 bce6be3921fd 9f11111004ec 7d75513fccd2 c337a85b8ef9 0969e9a2a900 bcb1d66a2e8e fc25f79e6d18 99f40b9b0686 74e66d79ebd2 d798e8490afc b9699ce57810 2bf97337def1 f0666bdbc8a5 bb11d257e651 4e02c2d461f1 564aaf0c408b 6d3eb69fcdd2 35341b0d3b35 ae28415398b8 b2f316884260 4e02c2d461f1 ce1f034abb5d 9dc34464aa01 4397f65e4a41 72bd4a50cf4a 46c88d9303da 4129ea7e3fb2 c33b5c3d0449 e943e5e5b779 bf064c332aa1 686154cccf9b 034e2d7f187e 0562c756a2f2 3486e5fe0d73 1b6d0614f2c7 07ff910d51d2 ea51fa83c91c f8b0c07e306c cbfb3eb99bea 0072efdaa34a b208ae1e8232 98d0d51b397c fbb5efbcc5b3 2390391258f8 cc429363fb23 586242498a88 d38820625542 f55be870e57d 818a7ff3bf29 6365c4563bd1 6ca2dd348663 c9a53ea6e219 094453b4e4ae 586242498a88 17620060a2c9 f35b29ed8530 1068682ce752 9863e54ff450 93790ade6682 a65259ff0092 f3bde448f56e cb0063f6fe58 55098c17d82d 0b091e7cc323 9b4bd994bf5b fe3fe35491b4 8389ad1d5da6 5948001254b3 8f75273e5510 286b99ff15dd 94851eb46649 26f768da5068 17447d3aaa04 1cced331c698 2af2169e0007 3a8cff3a4690 af8637086b9f 5a17632592c1 4357c81e10c1 a31962fbd5f3 038f36f4c95b 6bf9c0cb01b4 d8afd84c6fa9 c337a85b8ef9 26f768da5068 6af770640118 b61f1af56200 036087ac04f9 b136f6349cf3 53652632c16e e7ff075c7e74 0f88ca127938 2ef7c27a5df4 2d5d7bc2df91 6b583fe13e39 798fe9915030 8e93a2273a93 e67eb757a353 fadf6910e1df f9f90c2328ed ebe6b1fb3a5b 26f7353edc2e 133d46f7ed38 9bc96abb24e5 eeb86a6a04e4 578830762b27 1c303d15eb65 bce6be3921fd 798eee3a8bec 74c7b4b972ff 7d41ca882f26 25c57acdf805 dafbb201715e fb2cd24a447a 6bf9c0cb01b4 0562c756a2f2"
,'c0d455ef7403 849bc015c16a d38820625542 8d449aa88209 d0de1eb48407 d38820625542 8d449aa88209 04503bc22789 f0fd45d01d0a 1871e2e271e0 fd00110424fe 8754554be158 6ca2dd348663 d38820625542 6ca2dd348663 d38820625542 849bc015c16a 19ce59d8cd2f d9ef68daef4c 0d5c6a460006 360e8b28421c dab42b5e7528 d38820625542 8d449aa88209 0302af775b89 d9ef68daef4c 85bf198ebad1 360e8b28421c ecee69844b4e 2ea49cf89745 0302af775b89 ecee69844b4e 36e7aa72ffe1 8d21095e8690 11d62d3598ce 31cbd98f4b3c 6d10c76d455a 6ca2dd348663 d38820625542 849bc015c16a 6c8642055a4e bd0972f16400 b208ae1e8232 8754554be158 f1c9f7517642 98d0d51b397c f7ae6f8257da 5d52299fb20b 586242498a88 d38820625542 b99d622bf8e3 7233e4d3bbe3 fe081131ed3c 054cc375d1b7 0910ed429a9b bd0972f16400 dab42b5e7528 d38820625542 8d449aa88209 c0d455ef7403 9976cedc3992 87d5460509da 6a0833d27e3e 52332b619e25 cee2edc21279 73801426ea65 4c8cf4c337f7 235864b11bd7 951f6b4adb1d 2caa928c06f0 557ec6c63cf9 5d5d907818cc 55c2d4d8f1de 2ee1e0de2738 4c61fbca6fc5 19ce59d8cd2f cbd6e2e7a804 645915b326ec eeb86a6a04e4 918d14133622 f04f92002007 eca16ee06b98 48d657cd9861 6bff0c8c1185 f4cda746cb19 8c4c99dc5cc9 845975ac5737 aff49ae41c0a 25c57acdf805 fb2cd24a447a 005534a70b6e d28ffd3ee823 2bcce4e05d9d 1c303d15eb65 8711b0811666 ed1e3242ee34 57d5616683d8 75199e110c91 a9ab5733a115 ff1c26ea0b6f 7d41ca882f26 54709b24b45f 135b0b46a532 4ce4bfb42e22 eca16ee06b98 48d657cd9861 e4dad7cb07b6 f95d0bea231b 8db54a4cb57b de9738ee8b24 25c57acdf805 f0fd45d01d0a 25c57acdf805 641356219cbc 422068f04236 25c57acdf805 8871e31e57e2 abf52fd782d8 d493c688fb66 eeb86a6a04e4 838f54d7cc72 f77ad3479ff2 b9699ce57810 28702e9b2955 133d46f7ed38 586242498a88 f816f047c0db f54a40468e55 0387d20d0d1b 25c57acdf805 343d5d67eb39 b9699ce57810 ea51fa83c91c 6d1fb90988cf 73801426ea65 f0666bdbc8a5 d38820625542 b9699ce57810 98d0d51b397c 260edf2970fc 013c69d5aed9 ce1f034abb5d 6101ed18e42f 85b5a6bfb1bb af671fbeb212 2685f0879380 479e6e2b5afc e11a0de517a6 cf4fc632eed2 641356219cbc 93790ade6682 3a789c1fd114 f7ae6f8257da 4357c81e10c1 446c804d79cc fe3fe35491b4 cdee33987473 bbe04e5e7c47 422068f04236 d5a71864cb95 159680bbb885 9976cedc3992 586242498a88 9c034cd742d1 9ccf259ca087 3588a41e6da8 fe7ea318c1ac 54709b24b45f e943e5e5b779 9bc65adc033c b9699ce57810 a585ccb7283a b9699ce57810 eeb86a6a04e4 f0666bdbc8a5 98d0d51b397c 4192d4394e07 21e314d3afcc bc669f815b3d 422068f04236 7699d6f084f8 6af770640118 6ca2dd348663 3d80250d8fb9 01f3cce97364 f0666bdbc8a5 6b1c8f75a7e2 98d0d51b397c 93c988b67c47 1169f8aa8528 2ef7c27a5df4 10e45001c2f2 3486e5fe0d73 1b6d0614f2c7 266dc1fd820c e9dbbc533d93 ca5b23de2dd1 4e1c6ea5d356 25c57acdf805 5c960d5545d5 19e9f3592995 6bf9c0cb01b4 0562c756a2f2 9e5f2ff78f35 382618e9d034 7498a1e9d9d7 036087ac04f9 ce1f034abb5d ac624879ac84 b136f6349cf3 6d1fb90988cf 6bc122aa4b06 21ab107e9310 2ca392db71fd a0c020166d79 4e5019f629a9 641356219cbc ba8f19d976a8 25c57acdf805 ed5d3a65ee2d 7f39f529d16e 695f8877df2f 3560c7fd07a9 f07761418345 ab04416c57df 6bf9c0cb01b4 0562c756a2f2 034e2d7f187e 586242498a88 31fdb28ad1d7 9bc65adc033c fb2cd24a447a c5fb5a2f429f 586242498a88 54709b24b45f 60d331498465 3f4ecf0b8c30 25c57acdf805 11a6879d4cfa db0c88fd2e84 25c57acdf805 b208ae1e8232 1d4249bb404a a7d9f88a65fa d38820625542 98d0d51b397c f7ae6f8257da 9bc65adc033c 9a42ead47d1c ce1f034abb5d 1015893e384a 8d449aa88209 586242498a88 f95d0bea231b 10e45001c2f2 3486e5fe0d73 2fa4ceb0088d 75662b23ecc7 b9699ce57810 d38820625542 cbd6e2e7a804 f0666bdbc8a5 9a42ead47d1c dc03273b214a 98d0d51b397c 6ce6cc5a3203 2979f8b5c8c4 e760df3dbeab 923455195eaf fea862065b74 a7d9f88a65fa 8e93a2273a93 094453b4e4ae 74d61de64b3b 54709b24b45f 8d449aa88209 90769b70107f 6ce6cc5a3203 5be138559904 b9699ce57810 90aa24adbc68 2673f4e1c5e1 eca16ee06b98 98d0d51b397c 48d657cd9861 d38820625542 eeb86a6a04e4 d89b573c4ca9 f95d0bea231b 148bfe1e80eb b030b3b4616e 25c57acdf805 b9699ce57810 1b6d0614f2c7 f85012233d24 f0666bdbc8a5 98d0d51b397c 6bc122aa4b06 133d46f7ed38 4073ac3168fb 7557ac780220 1b7657be8986 f69bb4d63e4d 6d1fb90988cf 1fe62f2b2bff 564aaf0c408b d82c96fa9c21 1068682ce752 48d657cd9861 6b343f522f78 6ce6cc5a3203 798fe9915030 bc695abd3c2f c0696cfaa445 4129ea7e3fb2 e943e5e5b779 7a8a6586c707 d38820625542 d24ee96e26fa 8481f5dc8ef5 142a869d7da0 0bb188b769ee 2f7fa9ee2dbb d38820625542 4880b5f97cdd 9d83e581af4b 036087ac04f9 f5cf49fea788 2bcce4e05d9d ca8c8b26d423 4192d4394e07 21e314d3afcc 641356219cbc 446c804d79cc e943e5e5b779']


tokenized_sentences = [' '.join(nltk.word_tokenize(sent)) for sent in sentences]

payload = {"instances" : tokenized_sentences}

response = text_classifier.predict(json.dumps(payload))

predictions = json.loads(response)
print(json.dumps(predictions, indent=2))


# In[1]:





# In[ ]:





